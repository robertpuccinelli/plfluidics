'''Controller in model-view-controller framework for microfluidic hardware control application.
'''
from logging import Logger
from flask import request, render_template, redirect, url_for
from plfluidics.server.model import ModelMicrofluidicController


class MicrofluidicController():

    def __init__(self):
        self.model = ModelMicrofluidicController()

    def index(self):
        return render_template(url_for('index'))
    
    def index(self):
        server_status = self.model.data['server']['status']
        config_name = self.model.data['config']['config_name']
        driver = self.model.data['config']['driver']
        device_name = self.model.data['config']['device']
        valve_states = self.model.data['server']['valve_states']
        return render_template('index.html', 
                               status = server_status,
                               config_name = config_name,
                               driver = driver,
                               device_name = device_name,
                               valve_states=valve_states)
    
    def reset(self):
        self.model.reset()
        return redirect(url_for('index'))
    
    def setConfig(self):
        config = self.processConfig()
        self.model.configSet = config
        self.model.setDriver()
        return redirect(url_for('index'))
    
    def toggleValve(self, valve):
        if self.checkValveExists(valve):
            curr_state = self.model.data['server']['valve_states'][valve]
            if curr_state is 'open':
                self.model.closeValve(valve)
            elif curr_state is 'closed':
                self.model.openValve(valve)
        return redirect(url_for('index'))
    
    def openValve(self, valve):
        if self.checkValveExists(valve):
            self.model.openValve(valve)
        return redirect(url_for('index'))
    
    def openAll(self):
        for valve in self.model['server']['valve_states']:
            self.model.openValve(valve)
        return redirect(url_for('index'))

    def closeValve(self, valve):
        if self.checkValveExists(valve):
            self.model.closeValve(valve)
        return redirect(url_for('index'))
    
    def closeAll(self):
        for valve in self.model['server']['valve_states']:
            self.model.closeValve(valve)
        return redirect(url_for('index'))


#############
# UTILITIES #
#############

    def configInitialize(self, data):
        try:
            config = self.processConfig(data)
            self.model.configSet(config)
        except Exception as e:
            Logger.warning(f'Failed to set config: {e}')

        return redirect(url_for('index'))

    def lowercaseDict(self, data):
        '''Change text in dict to be lowercase.'''
        new_dict = {}
        for key in set(data):
            value = data[key]
            if isinstance(value, int):
                new_dict[key.lower()] = value 
            elif isinstance(value, str):
                new_dict[key.lower()] = value.lower()
            elif isinstance(value, bool):
                new_dict[key.lower()] = value 
            elif isinstance(value, dict):
                new_dict[key.lower()] = self.lowercaseDict(value)
            else:
                raise ValueError(f'Entry not formatted properly. Key: {key}, Value: {value}')
        return new_dict
    
    def checkValveExists(self, valve):
        if valve in self.model.data['server']['valve_states']:
            return True
        
    def processConfig(self):
        '''Validate configuration format and extract data'''
        data_dict = request.get_json()
        new_data = self.lowercaseDict(data_dict)
        fields = set(self.model.optionsGet())
        config_fields = fields['config_fields']
        config_set = set(new_data)
        if config_fields.difference(config_set):
            raise KeyError(f'Key missing in config: {config_fields.difference(config_set)}')
        
        if config_set.difference(config_fields):
            raise KeyError(f'Extra keys found in config: {config_set.difference(config_fields)}')

        if new_data['driver'] not in fields['driver_options']:
            raise ValueError(f'Driver not in recognized list: {fields['driver_options']}')
        
        new_valves = new_data['valves']
        valve_fields = fields['valve_fields']

        valve_data = []
        for valve in new_valves:
            valve['valve_alias'] = valve
            if set(valve_fields).difference(set(valve)):
                raise KeyError(f'Field missing from valve configuration. Valve: {valve}, Field: {set(valve_fields).difference(set(valve))}')
            valve_data.append({key: valve[key] for key in valve})

        new_data['valves'] = valve_data
        return new_data